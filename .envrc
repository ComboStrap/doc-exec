# Date from java util takes into account the default timezone
# https://learn.microsoft.com/en-us/java/openjdk/timezones#setting-the-tz-environment-variable
export TZ=UTC

# Project Name used by various third party
export PROJECT_NAME=doc-exec

# Git Hooks (modify the .git/config file)
git config core.hooksPath ./.git-hooks

# SDKMAN
# loading, as it's as the sdk command is a bash function
export SDKMAN_DIR=${SDKMAN_DIR:-"$HOME/.sdkman"}
SDKMAN_INIT_FILE="${SDKMAN_DIR}/bin/sdkman-init.sh"
if [[ ! -s "$SDKMAN_INIT_FILE" ]]; then
  echo "sdkman init file was not found and is mandatory (Path: $SDKMAN_INIT_FILE)"
  echo "You can"
  echo "  * install sdkman"
  echo "  * or overwrite the <.sdkman> dir by setting the SDKMAN_DIR env"
  return 1
fi
# We disable `set -o nounset` to avoid unbound variable errors
set +u
# shellcheck disable=SC1090
source "${SDKMAN_INIT_FILE}"


# Java Temurin
# Compilation based on https://github.com/openjdk/jdk16u
export JDK_VERSION
JDK_VERSION=$(yq --exit-status '.project.properties."jdk.version"' pom.xml)
export JRELEASER_PROJECT_LANGUAGES_JAVA_VERSION=${JDK_VERSION}
export JDK_DISTRIBUTION
JDK_DISTRIBUTION=$(yq --exit-status '.project.properties."jdk.distribution"' pom.xml | cut -c 1-3)
SDKMAN_JDK_VERSION="${JDK_VERSION}-${JDK_DISTRIBUTION}"
if ! sdk home java "${SDKMAN_JDK_VERSION}" >/dev/null; then
  sdk install java "${SDKMAN_JDK_VERSION}"
fi
sdk use java "${SDKMAN_JDK_VERSION}"


###################
# Mavens
###################
SDKMAN_MAVEN_VERSION=3.9.9
if ! sdk home maven "${SDKMAN_MAVEN_VERSION}" >/dev/null; then
  sdk install maven "${SDKMAN_MAVEN_VERSION}"
fi
sdk use maven "${SDKMAN_MAVEN_VERSION}"

###################
# JReleaser
###################
JRELEASER_VERSION=$(yq --exit-status '.project.properties."jreleaser.version"' pom.xml)
if ! sdk home jreleaser "${JRELEASER_VERSION}" >/dev/null; then
  sdk install jreleaser "${JRELEASER_VERSION}"
fi
sdk use jreleaser "${JRELEASER_VERSION}"
export JRELEASER_GITHUB_TOKEN
JRELEASER_GITHUB_TOKEN="$GITHUB_TOKEN"
# for the docker upload
export JRELEASER_DOCKER_GHCR_IO_PASSWORD="$GITHUB_TOKEN"
# Same as maven (Default to out)
export JRELEASER_OUTPUT_DIRECTORY=target
# search the .git directory recursively
export JRELEASER_GIT_ROOT_SEARCH=true
# execution directory so that we can execute it from anywhere
# PWD is direnv directory
export JRELEASER_BASEDIR=$PWD
if [ ! -f "$JRELEASER_BASEDIR/jreleaser.yml" ]; then
  echo "Bad base dir for Jreleaser"
  return 1
fi
